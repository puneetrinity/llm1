FROM nvidia/cuda:12.1.0-base-ubuntu22.04

# Set environment variables to prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    python3 \
    python3-pip \
    python3-dev \
    build-essential \
    git \
    dos2unix \
    && rm -rf /var/lib/apt/lists/*

# Install Ollama
RUN curl -fsSL https://ollama.com/install.sh | sh

# Environment variables for A5000 (24GB VRAM)
ENV OLLAMA_HOST=0.0.0.0:11434
ENV OLLAMA_NUM_PARALLEL=2
ENV OLLAMA_MAX_LOADED_MODELS=3
ENV NVIDIA_VISIBLE_DEVICES=all
ENV GPU_MEMORY_FRACTION=0.9

# Memory management for RunPod A5000
ENV MAX_MEMORY_MB=16384
ENV CACHE_MEMORY_LIMIT_MB=2048
ENV MODEL_MEMORY_LIMIT_MB=8192
ENV SEMANTIC_MODEL_MAX_MEMORY_MB=500

# Enhanced features configuration
ENV ENABLE_SEMANTIC_CLASSIFICATION=true
ENV ENABLE_STREAMING=true
ENV ENABLE_MODEL_WARMUP=true
ENV ENABLE_DETAILED_METRICS=true

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies with enhanced features
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir -r requirements.txt

# Pre-download ML model for semantic classification
RUN python3 -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')" || echo "ML model download failed - will fallback to basic features"

# Copy application code
COPY . .

# Fix line endings and make scripts executable
RUN if [ -f enhanced_start.sh ]; then \
        dos2unix enhanced_start.sh && \
        chmod +x enhanced_start.sh; \
    fi

# Create directories for data persistence
RUN mkdir -p /app/cache /app/logs /app/models

# Health check with appropriate timeouts for RunPod
HEALTHCHECK --interval=30s --timeout=20s --start-period=300s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 11434

# FIXED: Use a more reliable startup approach
CMD ["/bin/bash", "-c", "\
    echo 'üöÄ Starting Enhanced LLM Proxy Service...' && \
    \
    # Start Ollama in background \
    echo 'üì° Starting Ollama service...' && \
    ollama serve & \
    OLLAMA_PID=$! && \
    \
    # Wait for Ollama to be ready \
    echo '‚è≥ Waiting for Ollama to start...' && \
    for i in {1..30}; do \
        if curl -f http://localhost:11434/api/tags >/dev/null 2>&1; then \
            echo '‚úÖ Ollama is ready!'; \
            break; \
        fi; \
        echo \"   Attempt $i/30 - waiting 2 seconds...\"; \
        sleep 2; \
    done && \
    \
    # Check if Ollama started successfully \
    if ! curl -f http://localhost:11434/api/tags >/dev/null 2>&1; then \
        echo '‚ùå Failed to start Ollama service'; \
        exit 1; \
    fi && \
    \
    # Pull and warm up priority model \
    echo 'üì¶ Pulling Mistral 7B (Priority 1)...' && \
    ollama pull mistral:7b-instruct-q4_0 && \
    echo '‚úÖ Mistral 7B ready!' && \
    \
    # Warm up the model \
    echo 'üî• Warming up Mistral...' && \
    curl -X POST http://localhost:11434/api/chat \
        -H 'Content-Type: application/json' \
        -d '{\"model\": \"mistral:7b-instruct-q4_0\", \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}], \"stream\": false, \"options\": {\"num_predict\": 5}}' \
        >/dev/null 2>&1 && \
    echo '‚úÖ Mistral warmed up!' && \
    \
    # Pull other models in background \
    echo 'üì¶ Pulling additional models in background...' && \
    (ollama pull deepseek-v2:7b-q4_0 && echo '‚úÖ DeepSeek V2 7B ready!') & \
    (ollama pull llama3:8b-instruct-q4_0 && echo '‚úÖ LLaMA3 8B ready!') & \
    \
    # Start the FastAPI application \
    echo 'üåê Starting FastAPI application...' && \
    if [ -f main_enhanced.py ]; then \
        python3 main_enhanced.py; \
    elif [ -f main.py ]; then \
        python3 main.py; \
    else \
        echo '‚ùå No main.py found, creating basic one...' && \
        python3 -c \"\
from fastapi import FastAPI; \
from fastapi.middleware.cors import CORSMiddleware; \
import uvicorn; \
app = FastAPI(title='LLM Proxy', version='1.0.0'); \
app.add_middleware(CORSMiddleware, allow_origins=['*'], allow_credentials=True, allow_methods=['*'], allow_headers=['*']); \
@app.get('/health') \
async def health(): return {'status': 'healthy'}; \
@app.get('/') \
async def root(): return {'message': 'LLM Proxy API'}; \
uvicorn.run('__main__:app', host='0.0.0.0', port=8000)\"; \
    fi \
"]
