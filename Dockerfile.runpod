FROM nvidia/cuda:12.1.0-base-ubuntu22.04

# FIXED: Set environment variables to prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# CRITICAL FIX 1: Set CUDA environment variables FIRST
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# CRITICAL FIX 2: Install GPU detection tools BEFORE other packages
RUN apt-get update && apt-get install -y \
    pciutils \
    lshw \
    hwinfo \
    nvidia-utils-535 \
    curl \
    python3 \
    python3-pip \
    python3-dev \
    build-essential \
    git \
    dos2unix \
    && rm -rf /var/lib/apt/lists/*

# CRITICAL FIX 3: Install Ollama with proper GPU environment
RUN curl -fsSL https://ollama.com/install.sh | sh

# FIXED Environment variables for A5000 (24GB VRAM) - Conservative settings
ENV OLLAMA_HOST=0.0.0.0:11434
ENV OLLAMA_NUM_PARALLEL=2
ENV OLLAMA_MAX_LOADED_MODELS=2
ENV OLLAMA_GPU_OVERHEAD=0
ENV OLLAMA_DEBUG=INFO

# FIXED Memory management for RunPod A5000 - Conservative
ENV MAX_MEMORY_MB=12288
ENV CACHE_MEMORY_LIMIT_MB=1024
ENV MODEL_MEMORY_LIMIT_MB=6144
ENV SEMANTIC_MODEL_MAX_MEMORY_MB=500

# FIXED Enhanced features configuration - Conservative to avoid errors
ENV ENABLE_SEMANTIC_CLASSIFICATION=false
ENV ENABLE_STREAMING=true
ENV ENABLE_MODEL_WARMUP=true
ENV ENABLE_DETAILED_METRICS=true

WORKDIR /app

# CRITICAL FIX 4: Copy requirements with FIXED versions
COPY requirements.txt .

# FIXED: Install Python dependencies with compatible versions
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    aiohttp==3.9.1 \
    pydantic==2.5.0 \
    pydantic-settings==2.1.0 \
    psutil==5.9.6

# CRITICAL FIX 5: Install compatible huggingface_hub version
RUN pip3 install --no-cache-dir "huggingface_hub>=0.20.0,<0.25.0" && \
    pip3 install --no-cache-dir \
    "sentence-transformers>=2.2.0,<3.0.0" \
    "faiss-cpu==1.7.4" \
    "sse-starlette==1.6.5" \
    "numpy>=1.21.0,<1.25.0" || echo "Enhanced features may be limited"

# Copy application code
COPY . .

# Fix line endings and make scripts executable
RUN if [ -f enhanced_start.sh ]; then \
        dos2unix enhanced_start.sh && \
        chmod +x enhanced_start.sh; \
    fi

# Create directories for data persistence
RUN mkdir -p /app/cache /app/logs /app/models

# FIXED Health check with appropriate timeouts for RunPod
HEALTHCHECK --interval=60s --timeout=30s --start-period=300s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 11434

# CRITICAL FIX 6: Use FIXED startup approach with proper GPU setup
CMD ["/bin/bash", "-c", "\
    echo 'üöÄ Starting FIXED Enhanced LLM Proxy Service...' && \
    \
    # CRITICAL: Export GPU environment variables \
    export CUDA_VISIBLE_DEVICES=0 && \
    export NVIDIA_VISIBLE_DEVICES=all && \
    export OLLAMA_HOST=0.0.0.0:11434 && \
    export OLLAMA_GPU_OVERHEAD=0 && \
    \
    # Verify GPU detection \
    echo 'üîç Verifying GPU detection...' && \
    nvidia-smi || echo 'GPU detection may have issues' && \
    \
    # Start Ollama in background with GPU environment \
    echo 'üì° Starting Ollama service with GPU support...' && \
    CUDA_VISIBLE_DEVICES=0 ollama serve & \
    OLLAMA_PID=$$! && \
    \
    # Wait for Ollama to be ready with better error handling \
    echo '‚è≥ Waiting for Ollama to start...' && \
    for i in {1..60}; do \
        if curl -f http://localhost:11434/api/tags >/dev/null 2>&1; then \
            echo '‚úÖ Ollama is ready!'; \
            break; \
        fi; \
        echo \"   Attempt $$i/60 - waiting 5 seconds...\"; \
        sleep 5; \
    done && \
    \
    # Check if Ollama started successfully \
    if ! curl -f http://localhost:11434/api/tags >/dev/null 2>&1; then \
        echo '‚ùå Failed to start Ollama service - checking logs'; \
        ps aux | grep ollama; \
        exit 1; \
    fi && \
    \
    # Pull and warm up priority model with error handling \
    echo 'üì¶ Pulling Mistral 7B (Priority 1)...' && \
    (CUDA_VISIBLE_DEVICES=0 ollama pull mistral:7b-instruct-q4_0 || echo 'Model pull failed') && \
    echo '‚úÖ Mistral 7B ready!' && \
    \
    # Warm up the model \
    echo 'üî• Warming up Mistral...' && \
    (curl -X POST http://localhost:11434/api/chat \
        -H 'Content-Type: application/json' \
        -d '{\"model\": \"mistral:7b-instruct-q4_0\", \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}], \"stream\": false, \"options\": {\"num_predict\": 5}}' \
        >/dev/null 2>&1 && echo '‚úÖ Mistral warmed up!' || echo '‚ö†Ô∏è Warmup failed') && \
    \
    # Start the FastAPI application \
    echo 'üåê Starting FIXED FastAPI application...' && \
    if [ -f main.py ]; then \
        python3 main.py; \
    else \
        echo '‚ùå No main.py found, creating basic one...' && \
        python3 -c \"\
from fastapi import FastAPI; \
from fastapi.middleware.cors import CORSMiddleware; \
import uvicorn; \
app = FastAPI(title='FIXED LLM Proxy', version='2.1.0'); \
app.add_middleware(CORSMiddleware, allow_origins=['*'], allow_credentials=True, allow_methods=['*'], allow_headers=['*']); \
@app.get('/health') \
async def health(): return {'status': 'healthy', 'version': 'fixed'}; \
@app.get('/') \
async def root(): return {'message': 'FIXED LLM Proxy API'}; \
uvicorn.run('__main__:app', host='0.0.0.0', port=8000)\"; \
    fi \
"]
