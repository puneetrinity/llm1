# Dockerfile - Optimized for GitHub Container Registry Deployment
# Multi-stage build for consolidated FastAPI + React LLM Proxy

# Stage 1: Build React Frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files for better caching
COPY frontend/package*.json ./

# Install dependencies with clean cache
RUN npm ci --only=production --silent

# Copy frontend source
COPY frontend/ ./

# Build React app
RUN npm run build

# Verify build
RUN ls -la build/ && test -f build/index.html

# Stage 2: Python Backend with Frontend
FROM python:3.11-slim AS backend

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements first for better Docker layer caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY config.py main_master.py ./
COPY container_start.sh ./
COPY .env.template ./

# Copy built frontend from previous stage
COPY --from=frontend-builder /app/frontend/build ./frontend/build

# Create necessary directories
RUN mkdir -p logs data

# Make scripts executable
RUN chmod +x container_start.sh

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash app \
    && chown -R app:app /app
USER app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Expose port
EXPOSE 8001

# Default environment variables for container
ENV HOST=0.0.0.0 \
    PORT=8001 \
    LOG_LEVEL=INFO \
    ENABLE_DASHBOARD=true

# Start the application
CMD ["python", "main_master.py"]
