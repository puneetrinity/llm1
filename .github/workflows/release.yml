name: Release

# Event triggers for releases
on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%an)" HEAD)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## 🚀 Enhanced LLM Proxy ${{ steps.version.outputs.version }}
          
          ### 📦 Docker Images
          ```bash
          # Pull the latest release
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run with basic configuration
          docker run -d --name llm-proxy --gpus all \
            -p 8001:8001 -p 11434:11434 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Run with enhanced features
          docker run -d --name llm-proxy-enhanced --gpus all \
            -p 8001:8001 -p 11434:11434 \
            -e ENABLE_SEMANTIC_CLASSIFICATION=true \
            -e ENABLE_MODEL_WARMUP=true \
            -e MAX_MEMORY_MB=12288 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ```
          
          ### 🔗 Quick Links
          - 📚 [API Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - 🐳 [Docker Hub](https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }})
          - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
          
          ### 📋 Changes in this release
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🎯 Features
          - ✅ OpenAI-compatible API endpoints
          - ✅ GPU-accelerated inference with Ollama
          - ✅ Real-time streaming responses
          - ✅ Comprehensive monitoring & metrics
          - ✅ Production-ready security features
          - ✅ Semantic classification & routing (optional)
          - ✅ Advanced caching mechanisms
          - ✅ Circuit breaker protection
          
          ### 🔧 System Requirements
          - Docker with GPU support (nvidia-docker2)
          - NVIDIA GPU (optional, CPU fallback available)
          - 4GB+ RAM (12GB+ recommended for enhanced features)
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
    
    - name: Update Docker Hub description
      if: github.event_name == 'release'
      run: |
        echo "Updating container registry description..."
        # Add commands to update registry description if needed

  # Security scan for release
  security-scan-release:
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '0'  # Don't fail the release on vulnerabilities
    
    - name: Generate security report
      run: |
        echo "Security scan completed for release ${{ github.ref_name }}"

  # Notify on release
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-release, security-scan-release]
    if: always()
    
    steps:
    - name: Notify release completion
      run: |
        echo "🎉 Release ${{ github.ref_name }} completed successfully!"
        echo "📦 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "🔗 View release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
